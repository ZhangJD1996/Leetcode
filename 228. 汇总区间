/*
给定一个无重复元素的有序整数数组 nums 。

返回 恰好覆盖数组中所有数字 的 最小有序 区间范围列表。也就是说，nums 的每个元素都恰好被某个区间范围所覆盖，并且不存在属于某个范围但不属于 nums 的数字 x 。

列表中的每个区间范围 [a,b] 应该按如下格式输出：

"a->b" ，如果 a != b
"a" ，如果 a == b
 

示例 1：

输入：nums = [0,1,2,4,5,7]
输出：["0->2","4->5","7"]
解释：区间范围是：
[0,2] --> "0->2"
[4,5] --> "4->5"
[7,7] --> "7"
示例 2：

输入：nums = [0,2,3,4,6,8,9]
输出：["0","2->4","6","8->9"]
解释：区间范围是：
[0,0] --> "0"
[2,4] --> "2->4"
[6,6] --> "6"
[8,9] --> "8->9"
示例 3：

输入：nums = []
输出：[]
示例 4：

输入：nums = [-1]
输出：["-1"]
示例 5：

输入：nums = [0]
输出：["0"]
 

提示：

0 <= nums.length <= 20
-231 <= nums[i] <= 231 - 1
nums 中的所有值都 互不相同

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/summary-ranges
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。
*/
/*
  这题的意思：
  数组有序
  相邻数字差值为1的分到一个区间
  如果区间头尾相同，用单个索引表示：0,不相同用不同索引加箭头表示1->2
*/
/*
思路

对于包含连续元素的一段区间。如果相邻的元素之间的差值大于 11，那么这两个元素肯定不属于一段区间。

算法

为了得出这些区间，我们需要找到一种方法将它们分开。题目所给出的数组是有序的，同时还没有重复元素。在这样的数组里面，两个相邻的元素的差值要么等于 1 要么大于 1。对于那些差值等于 1 的就将它们被放在同一段区间内；否则，就将把它们放在不同的区间。

我们还需要知道的是一段区间的起始坐标，这样就可以把它们放进结果里面了。因此，我们需要保存两个坐标，分别代表一段区间的两个分界点。对于遍历到的每个新元素来说，检查一下它是否可以拓展当前的区间，如果不能，就把当前的元素作为一个新的区间的开始。

不要忘记把最后一段区间也放进结果里面。这个逻辑很容易实现，你可以在循环里通过一个特定的判断条件来加入或者在循环结束后加入。

*/
class Solution {
    public List<String> summaryRanges(int[] nums) {
        //返回的是List，且集合中存储的值可能重复
        List<String> summary = new ArrayList<String>();
        //遍历数组并进行判断（i代表区间下限，j代表区间上限）
        for(int i=0,j=0;j < nums.length;++j){
            //判断数组j+1位置的值是否等于j+1(是否构成连续区间)，如果等于则跳出此次循环，进入下一个循环（++j）
            if(j+1 < nums.length && nums[j+1] == nums[j]+1){
                continue;
            }
            //如果i==j证明此区间只有一个值
            if(i == j){
                summary.add(nums[i]+"");
            }
            //否则，此区间有多个值
            else{
                summary.add(nums[i]+"->"+nums[j]);
            }
            //更新区间下限
            i = j+1;

        }
        return summary;
    }
}
