/*
给定一个整数数组和一个整数 k，判断数组中是否存在两个不同的索引 i 和 j，使得 nums [i] = nums [j]，并且 i 和 j 的差的 绝对值 至多为 k。

Given an array of integers and an integer k, find out whether there are 
two distinct indices i and j in the array such that nums[i] = nums[j] 
and the absolute difference between i and j is at most k.



示例 1:

输入: nums = [1,2,3,1], k = 3
输出: true
示例 2:

输入: nums = [1,0,1,1], k = 1
输出: true
示例 3:

输入: nums = [1,2,3,1,2,3], k = 2
输出: false

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/contains-duplicate-ii
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。
*/
//解法1 暴力求解 
class Solution {
    public boolean containsNearbyDuplicate(int[] nums, int k) {
         for(int i = 0;i < nums.length;i++){
             for(int j = i+1;j < nums.length;j++){
                 if(nums[i] == nums[j] && j - i <= k){
                     return true;
                 }
             }
         }
         return false;
    }
}
//解法2
//利用set集合存储单列数据
/*
Set 无序,唯一

HashSet
底层数据结构是哈希表。(无序,唯一)
如何来保证元素唯一性?
1.依赖两个方法：hashCode()和equals()

LinkedHashSet
底层数据结构是链表和哈希表。(FIFO插入有序,唯一)
1.由链表保证元素有序
2.由哈希表保证元素唯一

TreeSet
底层数据结构是红黑树。(唯一，有序)
1. 如何保证元素排序的呢?
自然排序
比较器排序
2.如何保证元素唯一性的呢?
根据比较的返回值是否是0来决定
*/
//New一个HashSet，里面始终最多包含 k 个元素，当出现重复值时则说明在 k 距离内存在重复元素（set.contains(nums[i])）
//每次遍历一个元素则将其加入HashSet中，如果HashSet的大小大于 k，则移除最前面的数字

class Solution {
    public boolean containsNearbyDuplicate(int[] nums, int k) {
        HashSet<Integer> set = new HashSet<Integer>();
        for(int i = 0;i < nums.length;i++){
            if(set.contains(nums[i])){//判断Set中是否存在该值
                return true;
            }
            set.add(nums[i]);//将其添加到Set中
            if(set.size() > k){//如果大小大于k
                set.remove(nums[i-k]);//移除最前面的值
            }
        }
        return false;
    }
}


