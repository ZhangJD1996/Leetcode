/*
Given an array of integers A sorted in non-decreasing order, return an array of the squares of each number, also in sorted non-decreasing order.

 

Example 1:

Input: [-4,-1,0,3,10]
Output: [0,1,9,16,100]
Example 2:

Input: [-7,-3,2,3,11]
Output: [4,9,9,49,121]
 

Note:

1 <= A.length <= 10000
-10000 <= A[i] <= 10000
A is sorted in non-decreasing order.

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/squares-of-a-sorted-array
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。
*/
class Solution {
    public int[] sortedSquares(int[] A) {

/*执行用时: 3 ms
内存消耗: 40.4 MB*/
        // int[] n = new int[A.length];
        // for(int i = 0;i < A.length;i++){
        //     n[i] = A[i] * A[i]; 
        // }
        // Arrays.sort(n);
        // return n;

/*执行用时: 1 ms
内存消耗: 40.8 MB
*/
//归并排序思想


        //找到负值和正值分界线
        // int n = -1;
        // int len = A.length;
        // for(int i = 0;i < len;i++){
        //     if(A[i] < 0){
        //         n = i;
        //     }else{
        //         break;
        //     }
        // }
        // //先把小的值放进ans
        // int[] ans = new int[len];
        // int index = 0,i = n,j = n + 1;
        // while(i >= 0||j < len){
        //     if(i < 0){
        //         ans[index] = A[j] * A[j];
        //         j++;
        //     }else if(j == len){
        //         ans[index] = A[i] * A[i];
        //         --i;
        //     }else if(A[i] * A[i] < A[j] * A[j]){
        //         ans[index] = A[i] * A[i];
        //         --i;
        //     }else{
        //         ans[index] = A[j] * A[j];
        //         ++j;
        //     }
        //     ++index;
        // }
        // return ans;

/*执行用时: 1 ms
内存消耗: 40.7 MB
*/
        //双指针法
//使用两个指针分别指向位置 0 和 n−1，每次比较两个指针对应的数，选择较大的那个逆序放入答案并移动指针
        int n = A.length;
        int[] ans = new int[n];
        for(int i = 0,j = n-1,pos = n-1;i <= j;){
            if(A[i] * A[i] > A[j] * A[j]){
                ans[pos] = A[i] * A[i];
                ++i;
            }else{
                ans[pos] = A[j] * A[j];
                --j;
            }
            --pos;
        }
        return ans;
    }
}
