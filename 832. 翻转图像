/*
给定一个二进制矩阵 A，我们想先水平翻转图像，然后反转图像并返回结果。

水平翻转图片就是将图片的每一行都进行翻转，即逆序。例如，水平翻转 [1, 1, 0] 的结果是 [0, 1, 1]。

反转图片的意思是图片中的 0 全部被 1 替换， 1 全部被 0 替换。例如，反转 [0, 1, 1] 的结果是 [1, 0, 0]。

示例 1:

输入: [[1,1,0],[1,0,1],[0,0,0]]
输出: [[1,0,0],[0,1,0],[1,1,1]]
解释: 首先翻转每一行: [[0,1,1],[1,0,1],[0,0,0]]；
     然后反转图片: [[1,0,0],[0,1,0],[1,1,1]]
示例 2:

输入: [[1,1,0,0],[1,0,0,1],[0,1,1,1],[1,0,1,0]]
输出: [[1,1,0,0],[0,1,1,0],[0,0,0,1],[1,0,1,0]]
解释: 首先翻转每一行: [[0,0,1,1],[1,0,0,1],[1,1,1,0],[0,1,0,1]]；
     然后反转图片: [[1,1,0,0],[0,1,1,0],[0,0,0,1],[1,0,1,0]]
说明:

1 <= A.length = A[0].length <= 20
0 <= A[i][j] <= 1

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/flipping-an-image
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。
*/
//解法一：将A[i][j] 和 A[i][c - j - 1]进行交换（翻转），交换的同时反转即可 ^1
class Solution {
    public int[][] flipAndInvertImage(int[][] A) {
        int C = A[0].length;
        for (int[] row: A)
            //将A[i] 和 A[C - 1 - i]交换，交换之后反转
            for (int i = 0; i < (C + 1) / 2; ++i) {
                //如果i == C - 1 - i，即长度为奇数，直接反转
                if(i == C - 1 - i){
                    row[i] = row[i] ^ 1;
                    continue;
                }
                int tmp = row[i] ^ 1;
                row[i] = row[C - 1 - i] ^ 1;
                row[C - 1 - i] = tmp;
            }

        return A;
    }
}

//解法二：“双指针法”
//遍历每一行,定义两个左右指针;左指针从左向右,右指针从右向左遍历;指针指向的索引值不同继续遍历,相同0→1,1→0;
//指针指向同一位置,说明行元素为奇数个,0→1,1→0;

class Solution {
    public int[][] flipAndInvertImage(int[][] A) {
        //A.length为行的数量,遍历每一行
        for(int i=0;i < A.length;i++){
            //定义头尾“指针”
            int start = 0, end = A[i].length -1;
            while(start < end){
                //两数字不同，说明经过水平翻转和反转之后该位置的值不变，继续遍历
                if(A[i][start] != A[i][end]){
                    start++;
                    end--;
                }
                //两数字相同，虽然水平翻转时不变，但是反转时变化，即0->1,1->0
                else{
                    A[i][start] = A[i][end] = A[i][start]==1 ? 0 : 1;
                    start++;
                    end--;
                }
            }
            //如果指针可以指向同个位置，说明该数组的长度为奇数，反转会将该值改变
            if(end == start){
                A[i][start] = A[i][start] == 1 ? 0 : 1;
            }
        }
        return A;
    }
}
