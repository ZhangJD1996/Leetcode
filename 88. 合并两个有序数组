/*
给你两个有序整数数组 nums1 和 nums2，请你将 nums2 合并到 nums1 中，使 nums1 成为一个有序数组。

 

说明：

初始化 nums1 和 nums2 的元素数量分别为 m 和 n 。
你可以假设 nums1 有足够的空间（空间大小大于或等于 m + n）来保存 nums2 中的元素。
 

示例：

输入：
nums1 = [1,2,3,0,0,0], m = 3
nums2 = [2,5,6],       n = 3

输出：[1,2,2,3,5,6]
 

提示：

-10^9 <= nums1[i], nums2[i] <= 10^9
nums1.length == m + n
nums2.length == n

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/merge-sorted-array
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。
*/
//解法一：暴力求解
//直接合并然后排序（用时长）
/*
public static void arraycopy(Object src, int srcPos, Object dest, int destPos, int length)
代码解释:
　　Object src : 原数组
   int srcPos : 从原数据的起始位置开始
　　Object dest : 目标数组
　　int destPos : 目标数组的开始起始位置
　　int length  : 要copy的数组的长度
*/
class Solution {
    public void merge(int[] nums1, int m, int[] nums2, int n) {
        for(int i = 0;i < n;++i){
            nums1[m + i] = nums2[i];
        }
        Arrays.sort(nums1);
        // System.arraycopy(nums2, 0, nums1, m, n);
        // Arrays.sort(nums1);        
    }
}
//解法二：
/*
依次将指针i 置为 nums1的结尾， j为 nums2的结尾，在每一步将最大值放入输出数组的m+n-1位置(num1[m+n-1])中。(len = m+n-1)
即：如num1[i]的值小于num2[j]，则将num2[j]的值赋值给num1[len],同时指针向前移动(len--,j--),
    否则,将num1[i]的值赋值给num1[len],同时指针向前移动(len--,i--)
最后,如果j的值大于等于0,说明num2中的值没有全部放入num1中,但是剩下(索引小于等于j)的这些值都小于位于指针len位置的num1值(num1[len])
可以直接将num[2]中剩下的值依次放在num1中(索引小于等于len)
*/
class Solution {
    public void merge(int[] nums1, int m, int[] nums2, int n) {

        //利用数组有序这个前提条件进行加速
        //如果m为0，说明数组num1中没有值，只需将num2中的值都复制到num1即可
        if(m == 0){
            // for(int i = 0;i < n;++i){
            //     nums1[i] = nums2[i];
            // }
            System.arraycopy(nums2,0,nums1,0,n);//此语句相当于上面的for循环
            return;
        }
        //如果n为0，说明num2中没有值，直接结束程序即可
        if(n == 0){
            return;
        }
        //如果nums1 的最大值小于等于nums2的最小值（nums1的所有值都小于或等于nums2）
        if(nums1[m-1] <= nums2[0]){
            for(int i=0;i < n;++i){
                nums1[m+i] = nums2[i];
            }
            return;
        }
        //如果nums1 的最小值大于nums2的最大值（nums1的所有值都大于nums2）
        if(nums1[0] > nums2[n-1]){
            //将数组nums1的元素都往后移
            // for(int i = m+n-1;i >= n;--i){
            //     nums1[i] = nums1[i-n];
            // }
            System.arraycopy(nums1,0,nums1,m,m);
            //将数组nums2的值放入nums1中
            for(int i = 0;i < n;++i){
                nums1[i] = nums2[i];
            }
            System.arraycopy(nums2,0,nums1,0,n);
            return;

        }

        int i = m-1, j = n-1, len = m+n-1;
        while((i >= 0)&&(j >= 0)){
            // if(nums1[i] < nums2[j]){
            //     nums1[len] = nums2[j];
            //     --j;
            //     --len;
            // }
            // else{
            //     nums1[len] = nums1[i];
            //     --i;
            //     --len;
            // }
            nums1[len--] = (nums1[i] < nums2[j]) ? nums2[j--] :nums1[i--];//次语句相当于上面注释的多条程序
            
        }
        //如果j >= 0,说明,num2的值没有全部放入num1中
        // for(int k = 0;k <= j;++k){
        //     nums1[k] = nums2[k];
        // }
        System.arraycopy(nums2,0,nums1,0,j+1);

        
        
    }
}
